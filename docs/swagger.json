{
    "swagger": "2.0",
    "info": {
        "description": "This is the babeltower HTTP API documentation.",
        "title": "Babeltower API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/healthcheck": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Verify the service health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.Health"
                        }
                    }
                }
            }
        },
        "/tokens": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Generate a user's token",
                "parameters": [
                    {
                        "description": "User e-mail and password",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User's token",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateTokenResponse"
                        }
                    },
                    "403": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/controllers.DetailedErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a new user",
                "parameters": [
                    {
                        "description": "User e-mail and password",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message informing the user was created properly",
                        "schema": {
                            "$ref": "#/definitions/controllers.DetailedErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/controllers.DetailedErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/controllers.DetailedErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.CreateTokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.DetailedErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "entities.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "server.Health": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        }
    }
}